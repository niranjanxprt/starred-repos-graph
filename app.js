// GitHub Stars Graph Visualization - Enhanced Implementation
class GitHubStarsGraph {
    constructor() {
        this.repositories = [];
        this.filteredRepositories = [];
        this.simulation = null;
        this.svg = null;
        this.tooltip = null;
        this.width = window.innerWidth;
        this.height = window.innerHeight;
        
        // Enhanced category definitions with comprehensive keywords
        this.categories = {
            'ai-ml': ['ai', 'artificial intelligence', 'machine learning', 'ml', 'deep learning', 'neural', 'llm', 'gpt', 'openai', 'anthropic', 'langchain', 'tensorflow', 'pytorch', 'huggingface', 'transformer', 'agent', 'rag', 'vector', 'claude', 'gemini', 'chatgpt', 'llama', 'bert', 'embedding', 'semantic'],
            'web-dev': ['react', 'next', 'nextjs', 'vue', 'vuejs', 'angular', 'svelte', 'web', 'frontend', 'backend', 'fullstack', 'css', 'html', 'tailwind', 'bootstrap', 'javascript', 'typescript', 'node', 'nodejs', 'express', 'fastapi', 'django', 'flask'],
            'mobile': ['react-native', 'flutter', 'ios', 'android', 'mobile', 'expo', 'swift', 'kotlin', 'xamarin', 'ionic', 'cordova', 'phonegap', 'native', 'app'],
            'devops': ['docker', 'kubernetes', 'k8s', 'ci/cd', 'deployment', 'infrastructure', 'terraform', 'ansible', 'jenkins', 'helm', 'argo', 'flux', 'monitoring', 'prometheus', 'grafana', 'ops'],
            'data': ['data', 'analytics', 'database', 'sql', 'postgres', 'postgresql', 'mongodb', 'redis', 'elasticsearch', 'spark', 'pandas', 'etl', 'warehouse', 'pipeline', 'airflow', 'kafka', 'bigdata', 'nosql'],
            'tools': ['cli', 'command line', 'editor', 'ide', 'extension', 'utility', 'productivity', 'automation', 'terminal', 'shell', 'bash', 'zsh', 'vim', 'vscode', 'tool', 'generator'],
            'security': ['security', 'auth', 'authentication', 'authorization', 'encryption', 'privacy', 'vulnerability', 'oauth', 'jwt', 'ssl', 'tls', 'crypto', 'cipher', 'hash', 'secure'],
            'api': ['api', 'rest', 'restful', 'graphql', 'sdk', 'client', 'server', 'microservice', 'webhook', 'endpoint', 'service', 'grpc'],
            'learning': ['tutorial', 'course', 'learning', 'education', 'examples', 'book', 'guide', 'documentation', 'handbook', 'interview', 'study', 'practice', 'exercise', 'challenge'],
            'ui-ux': ['ui', 'ux', 'design', 'component', 'library', 'theme', 'icon', 'animation', 'motion', 'transition', 'interface', 'user experience'],
            'blockchain': ['blockchain', 'crypto', 'cryptocurrency', 'ethereum', 'bitcoin', 'web3', 'solidity', 'nft', 'defi', 'smart contract', 'dapp'],
            'game-dev': ['game', 'gaming', 'unity', 'unreal', 'godot', 'engine', 'graphics', '3d', 'physics', 'simulation', 'gamedev'],
            'mcp': ['mcp', 'model context protocol', 'claude desktop', 'anthropic'],
            'python': ['python', 'py', 'django', 'flask', 'fastapi', 'pandas', 'numpy', 'scipy'],
            'other': []
        };
        
        // Enhanced color scheme with better contrast and clustering
        this.categoryColors = {
            'ai-ml': '#8B5CF6',      // Purple - prominent for AI
            'web-dev': '#10B981',    // Emerald - fresh for web
            'python': '#F59E0B',     // Amber - Python's signature color
            'data': '#3B82F6',       // Blue - data ocean
            'tools': '#6B7280',      // Gray - utility
            'mobile': '#EF4444',     // Red - mobile energy
            'learning': '#84CC16',   // Lime - growth
            'devops': '#06B6D4',     // Cyan - infrastructure
            'ui-ux': '#EC4899',      // Pink - design
            'api': '#9333EA',        // Violet - connections
            'game-dev': '#F97316',   // Orange - gaming fun
            'security': '#DC2626',   // Dark red - security
            'mcp': '#A855F7',        // Purple variant - special
            'blockchain': '#F59E0B', // Gold - crypto
            'other': '#6366F1'       // Indigo - general
        };
        
        this.currentFilters = {
            search: '',
            category: 'all',
            language: 'all',
            stars: 'all'
        };
        
        this.init();
    }
    
    async init() {
        try {
            this.setupEventListeners();
            await this.loadRepositories();
            this.setupGraph();
            this.setupFilters();
            this.setupLegend();
            this.hideLoading();
            console.log('GitHub Stars Graph initialized successfully!');
        } catch (error) {
            console.error('Error initializing app:', error);
            this.showError(`Failed to initialize: ${error.message}`);
        }
    }
    
    setupEventListeners() {
        // Search functionality
        const searchInput = document.getElementById('search');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.currentFilters.search = e.target.value.toLowerCase();
                this.applyFilters();
            });
        }
        
        // Stars filters
        document.querySelectorAll('#stars-filters .filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('#stars-filters .filter-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                this.currentFilters.stars = e.target.dataset.stars;
                this.applyFilters();
            });
        });
        
        // Window resize
        window.addEventListener('resize', () => {
            this.handleResize();
        });
        
        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.resetFilters();
            }
        });
    }
    
    async loadRepositories() {
        const username = 'niranjanxprt';
        
        try {
            this.updateProgress('Connecting to data source...');
            
            // Try to load from data file first (if GitHub Actions has run)
            try {
                const response = await fetch('./data/repositories.json');
                if (response.ok) {
                    const data = await response.json();
                    this.repositories = data.repositories || [];
                    console.log(`Loaded ${this.repositories.length} repositories from data file`);
                    this.updateStats();
                    return;
                }\n            } catch (e) {\n                console.log('Data file not found, fetching from GitHub API...');\n            }\n            \n            // Fallback: Fetch directly from GitHub API\n            let page = 1;\n            const perPage = 100;\n            this.repositories = [];\n            \n            this.updateProgress('Fetching repository data from GitHub API...');\n            \n            while (page <= 8) { // Maximum 8 pages to get ~700+ repos\n                try {\n                    const url = `https://api.github.com/users/${username}/starred?per_page=${perPage}&page=${page}`;\n                    \n                    const response = await fetch(url);\n                    \n                    if (!response.ok) {\n                        if (response.status === 403) {\n                            throw new Error('GitHub API rate limit exceeded. The app will use cached data or try again later.');\n                        }\n                        throw new Error(`GitHub API error: ${response.status} ${response.statusText}`);\n                    }\n                    \n                    const repos = await response.json();\n                    \n                    if (repos.length === 0) break;\n                    \n                    const processedRepos = repos.map(repo => ({\n                        id: repo.id,\n                        name: repo.name,\n                        owner: repo.owner.login,\n                        fullName: repo.full_name,\n                        description: repo.description || '',\n                        url: repo.html_url,\n                        language: repo.language || 'Unknown',\n                        stars: repo.stargazers_count,\n                        forks: repo.forks_count,\n                        updatedAt: repo.updated_at,\n                        topics: repo.topics || [],\n                        category: this.categorizeRepo(repo)\n                    }));\n                    \n                    this.repositories = this.repositories.concat(processedRepos);\n                    \n                    this.updateProgress(`Loading repositories... ${this.repositories.length} found`);\n                    \n                    page++;\n                    \n                    // Small delay to be nice to GitHub API\n                    await new Promise(resolve => setTimeout(resolve, 200));\n                    \n                } catch (error) {\n                    console.error(`Error fetching page ${page}:`, error);\n                    if (this.repositories.length === 0) {\n                        throw error;\n                    }\n                    break;\n                }\n            }\n            \n            console.log(`Successfully loaded ${this.repositories.length} repositories`);\n            this.updateStats();\n            \n        } catch (error) {\n            console.error('Error loading repositories:', error);\n            \n            // Show error but try to continue with sample data for demo\n            this.showError(`Error loading data: ${error.message}. Please refresh to try again.`);\n            \n            // Set empty repositories to show error state\n            this.repositories = [];\n            this.updateStats();\n        }\n    }\n    \n    updateProgress(message) {\n        const progressText = document.getElementById('progress-text');\n        if (progressText) {\n            progressText.textContent = message;\n        }\n    }\n    \n    categorizeRepo(repo) {\n        const text = `${repo.name || ''} ${repo.description || ''} ${(repo.topics || []).join(' ')}`.toLowerCase();\n        const repoLanguage = (repo.language || '').toLowerCase();\n        \n        // Special handling for Python repositories\n        if (repoLanguage === 'python' && \n            (text.includes('python') || text.includes('django') || text.includes('flask'))) {\n            return 'python';\n        }\n        \n        // Check each category\n        for (const [category, keywords] of Object.entries(this.categories)) {\n            if (category === 'other') continue;\n            \n            if (keywords.some(keyword => text.includes(keyword))) {\n                return category;\n            }\n        }\n        \n        return 'other';\n    }\n    \n    setupGraph() {\n        this.svg = d3.select('#graph')\n            .attr('width', this.width)\n            .attr('height', this.height);\n        \n        this.tooltip = d3.select('#tooltip');\n        \n        // Clear existing content\n        this.svg.selectAll('*').remove();\n        \n        // Create zoom behavior\n        const zoom = d3.zoom()\n            .scaleExtent([0.1, 4])\n            .on('zoom', (event) => {\n                this.svg.selectAll('g').attr('transform', event.transform);\n            });\n        \n        this.svg.call(zoom);\n        \n        // Create main container group\n        const g = this.svg.append('g').attr('class', 'main-group');\n        \n        // Enhanced force simulation for better clustering\n        this.simulation = d3.forceSimulation()\n            .force('link', d3.forceLink().id(d => d.id).distance(100).strength(0.1))\n            .force('charge', d3.forceManyBody().strength(-200).distanceMax(300))\n            .force('center', d3.forceCenter(this.width / 2, this.height / 2))\n            .force('collision', d3.forceCollide().radius(d => this.getNodeRadius(d) + 3))\n            // Add category-based positioning forces for better clustering\n            .force('x', d3.forceX().x(d => this.getCategoryPosition(d.category).x).strength(0.1))\n            .force('y', d3.forceY().y(d => this.getCategoryPosition(d.category).y).strength(0.1));\n        \n        this.filteredRepositories = [...this.repositories];\n        this.updateVisualization();\n    }\n    \n    getCategoryPosition(category) {\n        // Strategic positioning for better visual clustering\n        const positions = {\n            'ai-ml': { x: this.width * 0.2, y: this.height * 0.2 },     // Top-left\n            'web-dev': { x: this.width * 0.8, y: this.height * 0.2 },   // Top-right\n            'python': { x: this.width * 0.2, y: this.height * 0.8 },    // Bottom-left\n            'data': { x: this.width * 0.8, y: this.height * 0.8 },      // Bottom-right\n            'tools': { x: this.width * 0.5, y: this.height * 0.1 },     // Top-center\n            'mobile': { x: this.width * 0.1, y: this.height * 0.5 },    // Left-center\n            'learning': { x: this.width * 0.9, y: this.height * 0.5 },  // Right-center\n            'devops': { x: this.width * 0.5, y: this.height * 0.9 },    // Bottom-center\n            'ui-ux': { x: this.width * 0.3, y: this.height * 0.3 },     // Inner positions\n            'api': { x: this.width * 0.7, y: this.height * 0.3 },\n            'security': { x: this.width * 0.3, y: this.height * 0.7 },\n            'game-dev': { x: this.width * 0.7, y: this.height * 0.7 },\n            'mcp': { x: this.width * 0.5, y: this.height * 0.4 },\n            'blockchain': { x: this.width * 0.6, y: this.height * 0.6 },\n            'other': { x: this.width * 0.5, y: this.height * 0.5 }       // Center\n        };\n        \n        return positions[category] || positions['other'];\n    }\n    \n    getNodeRadius(d) {\n        // Enhanced radius calculation for better visibility\n        const baseSize = Math.sqrt(d.stars || 1);\n        return Math.max(5, Math.min(30, baseSize * 0.2 + 4));\n    }\n    \n    setupFilters() {\n        // Category filters\n        const categoryContainer = document.getElementById('category-filters');\n        if (categoryContainer) {\n            const categories = ['all', ...Object.keys(this.categories)];\n            \n            categories.forEach(category => {\n                const btn = document.createElement('button');\n                btn.className = 'filter-btn' + (category === 'all' ? ' active' : '');\n                btn.textContent = category === 'all' ? 'All' : category.replace('-', ' ').toUpperCase();\n                btn.dataset.category = category;\n                btn.addEventListener('click', (e) => this.filterByCategory(category, e.target));\n                categoryContainer.appendChild(btn);\n            });\n        }\n        \n        // Language filters - FIXED: Now includes Python and all languages\n        const languageContainer = document.getElementById('language-filters');\n        if (languageContainer) {\n            // Get all unique languages with counts\n            const languageCounts = new Map();\n            this.repositories.forEach(repo => {\n                if (repo.language && repo.language !== 'Unknown') {\n                    languageCounts.set(repo.language, (languageCounts.get(repo.language) || 0) + 1);\n                }\n            });\n            \n            // Sort by count and take top languages\n            const topLanguages = Array.from(languageCounts.entries())\n                .sort((a, b) => b[1] - a[1])\n                .slice(0, 15)\n                .map(([lang, count]) => lang);\n            \n            // All languages button\n            const allBtn = document.createElement('button');\n            allBtn.className = 'filter-btn active';\n            allBtn.textContent = 'All';\n            allBtn.dataset.language = 'all';\n            allBtn.addEventListener('click', (e) => this.filterByLanguage('all', e.target));\n            languageContainer.appendChild(allBtn);\n            \n            // Individual language buttons\n            topLanguages.forEach(language => {\n                const btn = document.createElement('button');\n                btn.className = 'filter-btn';\n                btn.textContent = language;\n                btn.dataset.language = language;\n                btn.addEventListener('click', (e) => this.filterByLanguage(language, e.target));\n                languageContainer.appendChild(btn);\n            });\n        }\n    }\n    \n    setupLegend() {\n        const legendContainer = document.getElementById('legend-items');\n        if (legendContainer) {\n            const categoryCounts = {};\n            \n            // Count repositories per category\n            this.repositories.forEach(repo => {\n                categoryCounts[repo.category] = (categoryCounts[repo.category] || 0) + 1;\n            });\n            \n            // Create legend items sorted by count\n            Object.entries(categoryCounts)\n                .sort(([,a], [,b]) => b - a)\n                .forEach(([category, count]) => {\n                    const item = document.createElement('div');\n                    item.className = 'legend-item';\n                    \n                    const color = document.createElement('div');\n                    color.className = 'legend-color';\n                    color.style.backgroundColor = this.categoryColors[category] || '#6366F1';\n                    \n                    const label = document.createElement('span');\n                    label.textContent = `${category.replace('-', ' ').toUpperCase()} (${count})`;\n                    \n                    item.appendChild(color);\n                    item.appendChild(label);\n                    \n                    // Make legend items clickable to filter\n                    item.addEventListener('click', () => {\n                        this.filterByCategory(category);\n                        // Update category filter button\n                        document.querySelectorAll('#category-filters .filter-btn').forEach(btn => {\n                            btn.classList.remove('active');\n                            if (btn.dataset.category === category) {\n                                btn.classList.add('active');\n                            }\n                        });\n                    });\n                    \n                    item.style.cursor = 'pointer';\n                    legendContainer.appendChild(item);\n                });\n        }\n    }\n    \n    filterByCategory(category, button) {\n        this.currentFilters.category = category;\n        \n        if (button) {\n            document.querySelectorAll('#category-filters .filter-btn').forEach(btn => {\n                btn.classList.remove('active');\n            });\n            button.classList.add('active');\n        }\n        \n        this.applyFilters();\n    }\n    \n    filterByLanguage(language, button) {\n        this.currentFilters.language = language;\n        \n        if (button) {\n            document.querySelectorAll('#language-filters .filter-btn').forEach(btn => {\n                btn.classList.remove('active');\n            });\n            button.classList.add('active');\n        }\n        \n        this.applyFilters();\n    }\n    \n    applyFilters() {\n        this.filteredRepositories = this.repositories.filter(repo => {\n            // Search filter\n            if (this.currentFilters.search) {\n                const searchText = `${repo.name} ${repo.description} ${repo.language} ${repo.fullName}`.toLowerCase();\n                if (!searchText.includes(this.currentFilters.search)) return false;\n            }\n            \n            // Category filter\n            if (this.currentFilters.category !== 'all' && repo.category !== this.currentFilters.category) {\n                return false;\n            }\n            \n            // Language filter\n            if (this.currentFilters.language !== 'all' && repo.language !== this.currentFilters.language) {\n                return false;\n            }\n            \n            // Stars filter\n            if (this.currentFilters.stars !== 'all') {\n                const minStars = parseInt(this.currentFilters.stars);\n                if (repo.stars < minStars) return false;\n            }\n            \n            return true;\n        });\n        \n        this.updateVisualization();\n        this.updateStats();\n    }\n    \n    updateVisualization() {\n        if (!this.simulation || !this.svg) return;\n        \n        if (this.filteredRepositories.length === 0) {\n            this.showEmptyState();\n            return;\n        }\n        \n        // Create intelligent links between repositories\n        const links = this.createIntelligentLinks();\n        \n        const g = this.svg.select('.main-group');\n        \n        // Clear existing\n        g.selectAll('*').remove();\n        \n        // Update links with enhanced styling\n        const link = g.append('g')\n            .selectAll('line')\n            .data(links)\n            .enter().append('line')\n            .attr('class', 'link')\n            .attr('stroke', '#ffffff')\n            .attr('stroke-opacity', 0.15)\n            .attr('stroke-width', 1.5);\n        \n        // Update nodes with enhanced sizing and colors\n        const node = g.append('g')\n            .selectAll('circle')\n            .data(this.filteredRepositories)\n            .enter().append('circle')\n            .attr('class', 'node')\n            .attr('r', d => this.getNodeRadius(d))\n            .attr('fill', d => this.categoryColors[d.category] || '#6366F1')\n            .attr('stroke', '#ffffff')\n            .attr('stroke-width', 2)\n            .attr('opacity', 0.9)\n            .call(this.createDragHandler())\n            .on('click', (event, d) => {\n                window.open(d.url, '_blank');\n            })\n            .on('mouseover', (event, d) => {\n                this.showTooltip(event, d);\n                // Highlight connected nodes\n                d3.select(event.target)\n                    .attr('stroke-width', 4)\n                    .attr('opacity', 1);\n            })\n            .on('mouseout', (event, d) => {\n                this.hideTooltip();\n                d3.select(event.target)\n                    .attr('stroke-width', 2)\n                    .attr('opacity', 0.9);\n            });\n        \n        // Add labels for popular repositories\n        const label = g.append('g')\n            .selectAll('text')\n            .data(this.filteredRepositories.filter(d => d.stars > 30000))\n            .enter().append('text')\n            .attr('class', 'node-label')\n            .text(d => d.name.length > 12 ? d.name.substring(0, 12) + '...' : d.name)\n            .attr('dy', '.35em')\n            .style('font-size', '11px')\n            .style('font-weight', 'bold')\n            .style('fill', '#ffffff')\n            .style('text-anchor', 'middle')\n            .style('pointer-events', 'none')\n            .style('text-shadow', '2px 2px 4px rgba(0,0,0,0.8)');\n        \n        // Update simulation\n        this.simulation.nodes(this.filteredRepositories);\n        this.simulation.force('link').links(links);\n        this.simulation.alpha(0.6).restart();\n        \n        // Enhanced animation tick function\n        this.simulation.on('tick', () => {\n            link\n                .attr('x1', d => d.source.x)\n                .attr('y1', d => d.source.y)\n                .attr('x2', d => d.target.x)\n                .attr('y2', d => d.target.y);\n            \n            node\n                .attr('cx', d => d.x)\n                .attr('cy', d => d.y);\n            \n            label\n                .attr('x', d => d.x)\n                .attr('y', d => d.y);\n        });\n    }\n    \n    createIntelligentLinks() {\n        const links = [];\n        \n        // Group repositories by category for better clustering\n        const categoryGroups = d3.group(this.filteredRepositories, d => d.category);\n        \n        // Create links within categories (for clustering)\n        categoryGroups.forEach(repos => {\n            // Sort by stars to connect popular repos\n            repos.sort((a, b) => b.stars - a.stars);\n            \n            for (let i = 0; i < repos.length && i < 20; i++) {\n                for (let j = i + 1; j < Math.min(repos.length, i + 4); j++) {\n                    if (Math.random() > 0.6) { // Add some randomness to avoid over-connection\n                        links.push({\n                            source: repos[i].id,\n                            target: repos[j].id\n                        });\n                    }\n                }\n            }\n        });\n        \n        // Add some cross-category links for popular repositories\n        const popularRepos = this.filteredRepositories\n            .filter(repo => repo.stars > 50000)\n            .sort((a, b) => b.stars - a.stars)\n            .slice(0, 10);\n        \n        for (let i = 0; i < popularRepos.length; i++) {\n            for (let j = i + 1; j < popularRepos.length; j++) {\n                if (Math.random() > 0.8) {\n                    links.push({\n                        source: popularRepos[i].id,\n                        target: popularRepos[j].id\n                    });\n                }\n            }\n        }\n        \n        return links;\n    }\n    \n    createDragHandler() {\n        return d3.drag()\n            .on('start', (event, d) => {\n                if (!event.active) this.simulation.alphaTarget(0.3).restart();\n                d.fx = d.x;\n                d.fy = d.y;\n            })\n            .on('drag', (event, d) => {\n                d.fx = event.x;\n                d.fy = event.y;\n            })\n            .on('end', (event, d) => {\n                if (!event.active) this.simulation.alphaTarget(0);\n                d.fx = null;\n                d.fy = null;\n            });\n    }\n    \n    showTooltip(event, d) {\n        const [x, y] = [event.pageX, event.pageY];\n        \n        this.tooltip\n            .style('display', 'block')\n            .style('left', Math.min(x + 15, window.innerWidth - 370) + 'px')\n            .style('top', Math.max(y - 15, 10) + 'px')\n            .html(`\n                <div class=\"tooltip-title\">${d.name}</div>\n                <div class=\"tooltip-owner\">by ${d.owner}</div>\n                <div class=\"tooltip-category\">${d.category.replace('-', ' ').toUpperCase()}</div>\n                <div class=\"tooltip-meta\">\n                    <div class=\"tooltip-stat\">⭐ ${d.stars.toLocaleString()}</div>\n                    <div class=\"tooltip-stat\">🍴 ${d.forks.toLocaleString()}</div>\n                    <div class=\"tooltip-stat\">💻 ${d.language}</div>\n                    <div class=\"tooltip-stat\">🔗 ${d.fullName}</div>\n                </div>\n                <div class=\"tooltip-desc\">${d.description || 'No description available'}</div>\n                <div class=\"tooltip-action\">👆 Click to open repository</div>\n            `);\n    }\n    \n    hideTooltip() {\n        this.tooltip.style('display', 'none');\n    }\n    \n    showEmptyState() {\n        const g = this.svg.select('.main-group');\n        g.selectAll('*').remove();\n        g.append('text')\n            .attr('x', this.width / 2)\n            .attr('y', this.height / 2)\n            .attr('text-anchor', 'middle')\n            .attr('fill', '#ffffff')\n            .attr('font-size', '20px')\n            .attr('font-weight', 'bold')\n            .text('No repositories match your current filters');\n        \n        g.append('text')\n            .attr('x', this.width / 2)\n            .attr('y', this.height / 2 + 30)\n            .attr('text-anchor', 'middle')\n            .attr('fill', '#ffffff')\n            .attr('font-size', '14px')\n            .text('Try adjusting your search criteria or reset filters');\n    }\n    \n    updateStats() {\n        document.getElementById('total-repos').textContent = this.repositories.length;\n        document.getElementById('visible-repos').textContent = this.filteredRepositories.length;\n        document.getElementById('last-updated').textContent = new Date().toLocaleString('en-US', {\n            month: 'short',\n            day: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n    }\n    \n    resetFilters() {\n        // Reset all filters\n        this.currentFilters = {\n            search: '',\n            category: 'all',\n            language: 'all',\n            stars: 'all'\n        };\n        \n        // Reset UI elements\n        const searchInput = document.getElementById('search');\n        if (searchInput) searchInput.value = '';\n        \n        document.querySelectorAll('.filter-btn').forEach(btn => {\n            btn.classList.remove('active');\n        });\n        \n        // Activate 'all' buttons\n        document.querySelectorAll('[data-category=\"all\"], [data-language=\"all\"], [data-stars=\"all\"]').forEach(btn => {\n            btn.classList.add('active');\n        });\n        \n        this.applyFilters();\n    }\n    \n    handleResize() {\n        if (!this.svg || !this.simulation) return;\n        \n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n        \n        this.svg.attr('width', this.width).attr('height', this.height);\n        this.simulation.force('center', d3.forceCenter(this.width / 2, this.height / 2));\n        this.simulation.alpha(0.3).restart();\n    }\n    \n    hideLoading() {\n        const loading = document.getElementById('loading');\n        if (loading) {\n            loading.style.display = 'none';\n        }\n    }\n    \n    showError(message) {\n        const loading = document.getElementById('loading');\n        if (loading) {\n            loading.innerHTML = `\n                <div class=\"error-message\">\n                    <h3>⚠️ Error</h3>\n                    <p>${message}</p>\n                    <button onclick=\"location.reload()\" class=\"filter-btn\" style=\"margin-top: 15px; background: #EF4444;\">\n                        🔄 Retry\n                    </button>\n                </div>\n            `;\n        }\n    }\n}\n\n// Initialize the application when the page loads\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        new GitHubStarsGraph();\n    });\n} else {\n    new GitHubStarsGraph();\n}"